import os
import replicate
import asyncio
import logging
from asyncio import CancelledError
import speech_recognition as sr
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
import config as cf
from src.mailing.data.notification.notification_google_sheets_worker import notification_gsworker
from pydub import AudioSegment
import asyncpg
import re

class MailingStates(StatesGroup):
    waiting_for_time = State()

class NotificationGoogleSheetsWorker:
    def __init__(self):
        self.subscribed_ids = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    def contains_id(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ID –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫"""
        return user_id in self.subscribed_ids

    def add_id(self, user_id: int) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫"""
        if user_id not in self.subscribed_ids:
            self.subscribed_ids.append(user_id)
            logging.info(f"User {user_id} added to subscription list.")

    def remove_id(self, user_id: int) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        if user_id in self.subscribed_ids:
            self.subscribed_ids.remove(user_id)
            logging.info(f"User {user_id} removed from subscription list.")

DB_CONFIG = {
    "user": "postgress",
    "password": "0000",
    "database": "warehouse",
    "host": "host"
}

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class SubscriptionState(StatesGroup):
    choosing_type = State()
    choosing_day = State()
    choosing_time = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î
async def save_subscription(user_id: int, sub_type: str, weekday: int | None, time: str):
    conn = await asyncpg.connect(**DB_CONFIG)
    await conn.execute(
        """
        INSERT INTO subscriptions (user_id, subscription_type, weekday, time)
        VALUES ($1, $2, $3, $4)
        ON CONFLICT (user_id) DO UPDATE 
        SET subscription_type = $2, weekday = $3, time = $4;
        """, user_id, sub_type, weekday, time
    )
    await conn.close()


notification_gsworker = NotificationGoogleSheetsWorker()  # –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç worker

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞
waiting_for_question = set()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
router = Router(name=__name__)
dp = Dispatcher()

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API-–∫–ª—é—á –¥–ª—è Replicate
os.environ["REPLICATE_API_TOKEN"] = "r8_TaFGkUSHUTT5nRm6YlFTiW9XxnbYJ6N0ZB0tE"
replicate.api_token = os.environ["REPLICATE_API_TOKEN"]

@router.message(MailingStates.waiting_for_time)
async def process_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î"""
    user_time = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú)
    if not re.match(r"^(?:[01]\d|2[0-3]):[0-5]\d$", user_time):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:30")
        return

    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    period = data.get("period")  # –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ (daily, weekdays, weekly, monthly)
    weekday = data.get("weekday")  # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    user_id = message.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
    try:
        await save_subscription(user_id, period, weekday, user_time)
        logging.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: user_id {user_id}, –ø–µ—Ä–∏–æ–¥ {period}, –¥–µ–Ω—å {weekday}, –≤—Ä–µ–º—è {user_time}")
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–∏–æ–¥ '{period}' –∏ –≤—Ä–µ–º—è '{user_time}'. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    await state.clear()

def get_markup(user_id: int, has_token: bool) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    inline_kb = []

    if not has_token:
        btn = [types.InlineKeyboardButton(text='–ú–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤', callback_data='server_report_authorization')]
        inline_kb.append(btn)
    else:
        btn = [types.InlineKeyboardButton(text='–ú–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤', callback_data='analytics_report_begin')]
        inline_kb.append(btn)

    btn = [types.InlineKeyboardButton(text='–ú–µ–Ω—é —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∏ üõ†', callback_data='techsupport_menu')]
    inline_kb.append(btn)

    if notification_gsworker.contains_id(user_id):
        btn = [types.InlineKeyboardButton(text='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚ùå', callback_data='unregister')]
    else:
        btn = [types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üì©', callback_data='register_mailing')]
    inline_kb.append(btn)

    btn = [types.InlineKeyboardButton(text='–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç üìä', callback_data='generate_report')]
    inline_kb.append(btn)

    btn = [types.InlineKeyboardButton(text='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ç—á—ë—Ç üìë', callback_data='generate_sample_report')]
    inline_kb.append(btn)

    btn = [types.InlineKeyboardButton(text='–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ JSON üìä', callback_data='generate_json_report')]
    inline_kb.append(btn)

    btn = [types.InlineKeyboardButton(text='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì', callback_data='send_question')]
    inline_kb.append(btn)

    return types.InlineKeyboardMarkup(inline_keyboard=inline_kb)  # –ü–µ—Ä–µ–¥–∞–µ–º inline_keyboard


async def get_mistral_answer(question: str) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ Mistral —á–µ—Ä–µ–∑ API Replicate"""
    response = replicate.run(
        "meta/meta-llama-3-8b-instruct",  # –ü—Ä–∏–º–µ—Ä –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏
        input={
            "prompt": f"–¢—ã ‚Äî —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º: {question}",
            "max_length": 200
        }
    )
    return "".join(response)


async def recognize_speech_from_audio(file_path: str) -> str:
    """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
    recognizer = sr.Recognizer()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV
    try:
        audio = AudioSegment.from_ogg(file_path)
        wav_path = file_path.replace(".ogg", ".wav")
        audio.export(wav_path, format="wav")
        logging.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OGG –≤ WAV –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {wav_path}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º speech_recognition –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ WAV —Ñ–∞–π–ª–∞
    try:
        with sr.AudioFile(wav_path) as source:
            audio = recognizer.record(source)
        text = recognizer.recognize_google(audio, language="ru-RU")
        logging.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
        return text
    except sr.UnknownValueError:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å."
    except sr.RequestError as e:
        logging.error(f"–û—à–∏–±–∫–∞ API —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
        return "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏."




@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω
    has_token = False  # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
        reply_markup=get_markup(user_id, has_token)
    )


@router.callback_query(F.data == "send_question")
async def handle_send_question_button(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'"""
    user_id = callback_query.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'. –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è
    if user_id in waiting_for_question:
        await callback_query.message.answer("–í—ã —É–∂–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
    waiting_for_question.add(user_id)
    logging.info(f"–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {waiting_for_question}")
    await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")


@router.message(F.text | F.voice)
async def handle_question_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π: {waiting_for_question}")

    if user_id not in waiting_for_question:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    waiting_for_question.remove(user_id)
    logging.info(f"–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {waiting_for_question}")

    if message.text:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ Mistral
        answer = await get_mistral_answer(message.text)
        await message.answer(f"–û—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {answer}")
    elif message.voice:
        await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        file_id = message.voice.file_id
        file = await message.bot.get_file(file_id)
        file_path = f"files/voices/{file.file_id}.ogg"
        await message.bot.download_file(file.file_path, file_path)
        logging.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç
        recognized_text = await recognize_speech_from_audio(file_path)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ Mistral
        answer = await get_mistral_answer(recognized_text)
        await message.answer(f"–û—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {answer}")

    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'.")

@router.callback_query(F.data == "register_mailing")
async def handle_register_subscription(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'"""
    user_id = callback_query.from_user.id
    logging.info(f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {notification_gsworker.subscribed_ids}")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ö–æ—á–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
    if not notification_gsworker.contains_id(user_id):
        notification_gsworker.add_id(user_id)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")
        await callback_query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üì©")
    else:
        await callback_query.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üì©")

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="period_daily")],
        [types.InlineKeyboardButton(text="–ü–æ –±—É–¥–Ω—è–º (–ø–Ω-–ø—Ç)", callback_data="period_weekdays")],
        [types.InlineKeyboardButton(text="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="period_weekly")],
        [types.InlineKeyboardButton(text="–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data="period_monthly")]  # Monthly option
    ])

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=markup
    )



@router.callback_query(F.data == "period_daily")
async def set_daily_time(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00).")


@router.callback_query(F.data == "period_weekdays")
async def set_weekdays_time(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –±—É–¥–Ω—è–º"""
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –±—É–¥–Ω—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00).")


@router.callback_query(F.data == "period_weekly")
async def set_weekly_time(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    days_of_week = [
        ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "weekly_monday"),
        ("–í—Ç–æ—Ä–Ω–∏–∫", "weekly_tuesday"),
        ("–°—Ä–µ–¥–∞", "weekly_wednesday"),
        ("–ß–µ—Ç–≤–µ—Ä–≥", "weekly_thursday"),
        ("–ü—è—Ç–Ω–∏—Ü–∞", "weekly_friday"),
        ("–°—É–±–±–æ—Ç–∞", "weekly_saturday"),
        ("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "weekly_sunday")
    ]

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    buttons = [
        [types.InlineKeyboardButton(text=day, callback_data=callback)]
        for day, callback in days_of_week
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –ø—É—Å—Ç–∞—è
    if not buttons:
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.")
        return

    markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=markup
    )



@router.callback_query(F.data.startswith("weekly_"))
async def set_weekly_time_and_day(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    day_of_week = callback_query.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    await state.update_data(weekday=day_of_week)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏

    await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {day_of_week.capitalize()}.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00):")
    await state.set_state(MailingStates.waiting_for_time)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@router.callback_query(F.data == "period_monthly")
async def set_monthly_day(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    markup = types.InlineKeyboardMarkup(inline_keyboard=[])

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞
    for day in range(1, 32):
        markup.inline_keyboard.append([types.InlineKeyboardButton(text=str(day), callback_data=f"monthly_{day}")])

    # Pass the list of buttons to `inline_keyboard`
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=markup
    )




@router.callback_query(F.data.startswith("monthly_"))
async def set_monthly_time_and_day(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    day_of_month = callback_query.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
    await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {day_of_month} —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")


@router.callback_query(F.data == "period_monthly")
async def set_monthly_time(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00):")
    await state.set_state(MailingStates.waiting_for_time)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ª–æ–≥–∏–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏
@router.message(MailingStates.waiting_for_time)
async def process_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    user_time = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú)
    import re
    if not re.match(r"^(?:[01]\d|2[0-3]):[0-5]\d$", user_time):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:30")
        return

    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    period = data.get("period")  # –î–æ—Å—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    await state.update_data(time=user_time)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–∏–æ–¥ '{period}' –∏ –≤—Ä–µ–º—è '{user_time}'. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    await state.clear()
    logging.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: –ø–µ—Ä–∏–æ–¥ {period}, –≤—Ä–µ–º—è {user_time}")


@router.callback_query(F.data.startswith("period_"))
async def set_time(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    period = callback_query.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥ (daily, weekdays, weekly, monthly)
    await state.update_data(period=period)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥

    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00):")
    await state.set_state(MailingStates.waiting_for_time)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@router.message(MailingStates.waiting_for_time)
async def process_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    user_time = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú)
    import re
    if not re.match(r"^(?:[01]\d|2[0-3]):[0-5]\d$", user_time):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:30")
        return

    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    period = data.get("period")  # –î–æ—Å—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    await state.update_data(time=user_time)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–∏–æ–¥ '{period}' –∏ –≤—Ä–µ–º—è '{user_time}'. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    await state.clear()
    logging.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: –ø–µ—Ä–∏–æ–¥ {period}, –≤—Ä–µ–º—è {user_time}")


@router.callback_query(lambda c: c.data == "register_mailing")
async def register_mailing(callback_query: CallbackQuery):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback_query.from_user.id
    if notification_gsworker.contains_id(user_id):
        await callback_query.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")
    else:
        notification_gsworker.add_id(user_id)
        await save_subscription(user_id, "daily", None, "09:00")  # –ü—Ä–∏–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ 09:00
        await callback_query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üì©")
        await callback_query.message.edit_reply_markup(get_markup(user_id, has_token=False))


@router.callback_query(lambda c: c.data == "unregister")
async def unregister_mailing(callback_query: CallbackQuery):
    """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback_query.from_user.id
    if not notification_gsworker.contains_id(user_id):
        await callback_query.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")
    else:
        notification_gsworker.remove_id(user_id)
        await save_subscription(user_id, "none", None, None)  # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –ë–î
        await callback_query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚ùå")
        await callback_query.message.edit_reply_markup(get_markup(user_id, has_token=False))


@router.callback_query(lambda c: c.data == "send_question")
async def send_question(callback_query: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    user_id = callback_query.from_user.id
    await callback_query.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å.")
    await callback_query.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    await MailingStates.waiting_for_time.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=MailingStates.waiting_for_time)
async def process_question(message: Message, state: FSMContext):
    user_question = message.text.strip()
    await message.answer(f"–í–∞—à –≤–æ–ø—Ä–æ—Å: {user_question}\n–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.clear()

@router.callback_query(lambda c: c.data == "generate_report")
async def generate_report(callback_query: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    user_id = callback_query.from_user.id
    await callback_query.answer("–û—Ç—á—ë—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å –≤ –ë–î –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π API
    # –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –æ—Ç—á—ë—Ç –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    # –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞
    report_content = "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—Ç—á—ë—Ç–∞. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞."

    await callback_query.message.answer(report_content)


@router.callback_query(lambda c: c.data == "generate_sample_report")
async def generate_sample_report(callback_query: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    user_id = callback_query.from_user.id
    await callback_query.answer("–ü—Ä–∏–º–µ—Ä –æ—Ç—á—ë—Ç–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")

    # –ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞
    sample_report = "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ç—á—ë—Ç. –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–µ—Å—å."

    await callback_query.message.answer(sample_report)


@router.callback_query(lambda c: c.data == "generate_json_report")
async def generate_json_report(callback_query: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"""
    user_id = callback_query.from_user.id
    await callback_query.answer("–û—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")

    # –ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –≤ JSON
    json_report = {"report": {"status": "success", "data": [1, 2, 3, 4]}}

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É JSON
    import json
    json_content = json.dumps(json_report)

    await callback_query.message.answer(f"–û—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n{json_content}")

async def include_routers() -> None:
    """–ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã"""
    dp.include_router(router)


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = Bot(token=cf.TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await include_routers()
    await bot.delete_webhook()

    try:
        logging.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
        await dp.start_polling(bot)
    except (CancelledError, KeyboardInterrupt, SystemExit):
        dp.shutdown()
        logging.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')


if __name__ == '__main__':
    asyncio.run(main())

