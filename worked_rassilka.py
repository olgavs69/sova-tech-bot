import asyncio
import logging
from asyncio import CancelledError

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
import asyncpg
from datetime import datetime, time

import config as cf
from src.mailing.data.notification.notification_google_sheets_worker import notification_gsworker
from src.mailing.notifications.select_report import subscribe_notifications, setup_routers_select_reports
from src.sound_and_text_ai.ai_answers import ai_answer

from src.mailing.notifications.keyboards import periodicity_kb, timezone_kb, weekdays_kb

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=cf.TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞
waiting_for_question = set()


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class MailingStates(StatesGroup):
    waiting_for_time = State()


class Form(StatesGroup):
    choosing_time = State()


class SubscriptionState(StatesGroup):
    choosing_frequency = State()
    choosing_type = State()
    choosing_day = State()
    choosing_timezone = State()
    choosing_monthly_day = State()  # –ù–æ–≤—ã–π state –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –º–µ—Å—è—Ü–∞
    choosing_time = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è worker
class NotificationGoogleSheetsWorker:
    def __init__(self):
        self.subscribed_ids = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    def contains_id(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ID –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫"""
        return user_id in self.subscribed_ids

    def add_id(self, user_id: int) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫"""
        if user_id not in self.subscribed_ids:
            self.subscribed_ids.append(user_id)
            logging.info(f"User {user_id} added to subscription list.")

    def remove_id(self, user_id: int) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        if user_id in self.subscribed_ids:
            self.subscribed_ids.remove(user_id)
            logging.info(f"User {user_id} removed from subscription list.")


DB_CONFIG = cf.DB_CONFIG


async def init_db_pool():
    return await asyncpg.create_pool(cf.DB_LINK)


db_pool = None

notification_gsworker = NotificationGoogleSheetsWorker()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
router = Router(name=__name__)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    has_token = False  # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ SOVA-TECH.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ",
        reply_markup=get_markup(user_id, has_token)
    )


# –†–æ—É—Ç–µ—Ä —Å –∫–ª–∞–≤–∏—à–∞–º–∏
def get_markup(user_id: int, has_token: bool) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    inline_kb = []

    if not has_token:
        btn = [types.InlineKeyboardButton(text='–ú–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤', callback_data='server_report_authorization')]
        inline_kb.append(btn)
    else:
        btn = [types.InlineKeyboardButton(text='–ú–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤', callback_data='analytics_report_begin')]
        inline_kb.append(btn)

    btn = [types.InlineKeyboardButton(text='–ú–µ–Ω—é —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∏ üõ†', callback_data='techsupport_menu')]
    inline_kb.append(btn)

    if notification_gsworker.contains_id(user_id):
        btn = [types.InlineKeyboardButton(text='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚ùå', callback_data='unregister')]
    else:
        btn = [
            types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üì©', callback_data='register_mailing')]
    inline_kb.append(btn)

    btn = [types.InlineKeyboardButton(text='–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç üìä', callback_data='generate_report')]
    inline_kb.append(btn)

    btn = [types.InlineKeyboardButton(text='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì', callback_data='send_question')]
    inline_kb.append(btn)

    btn = [types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ üìÖ', callback_data='show_subscriptions')]
    inline_kb.append(btn)

    return types.InlineKeyboardMarkup(inline_keyboard=inline_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
@subscribe_notifications.callback_query(F.data.startswith('subscribe_'))
async def handle_subscribe(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É'"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –æ—Ç—á—ë—Ç–∞ –∏–∑ callback_data
    report_type = callback_query.data.replace("subscribe_", "", 1)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —Ç–∏–ø–∞: {report_type}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ—Ç—á—ë—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(report_type=report_type)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —Ç–∏–ø–∞: {report_type}")

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    keyboard = periodicity_kb
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("sub_"))
async def choose_subscription_type(callback_query: CallbackQuery, state: FSMContext):
    sub_type = callback_query.data.split("_")[1]

    await state.update_data(sub_type=sub_type)

    if sub_type == "daily":
        await state.update_data(frequency="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ")
    elif sub_type == "workdays":
        await state.update_data(frequency="–ü–æ –±—É–¥–Ω—è–º (–ü–Ω-–ü—Ç)")
    elif sub_type == "weekly":
        await state.update_data(frequency="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ")
    elif sub_type == "monthly":
        await state.update_data(frequency="–ï–∂–µ–º–µ—Å—è—á–Ω–æ")

    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–∞—Å–æ–≤—É—é –∑–æ–Ω—É
    await state.set_state(SubscriptionState.choosing_timezone)
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", reply_markup=timezone_kb)


@router.callback_query(F.data.startswith("tz_"))
async def choose_timezone(callback_query: CallbackQuery, state: FSMContext):
    timezone_offset = int(callback_query.data.split("_")[1])
    await state.update_data(timezone_offset=timezone_offset)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–µ –ø–æ–¥–ø–∏—Å–∫–∏
    data = await state.get_data()
    sub_type = data.get("sub_type")

    if sub_type == "weekly":
        # –î–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        await state.set_state(SubscriptionState.choosing_day)
        days_kb = weekdays_kb
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=days_kb)
    elif sub_type == "monthly":
        # –î–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        await state.set_state(SubscriptionState.choosing_monthly_day)
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (–æ—Ç 1 –¥–æ 31), –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.")
    else:
        # –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∏ –ø–æ –±—É–¥–Ω—è–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        await state.set_state(SubscriptionState.choosing_time)
        await callback_query.message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")


@router.callback_query(F.data.startswith("day_"))
async def choose_weekday(callback_query: CallbackQuery, state: FSMContext):
    weekday = int(callback_query.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 6
    await state.update_data(weekday=weekday)

    logging.info(f"Selected weekday: {weekday}")

    await state.set_state(SubscriptionState.choosing_time)
    await callback_query.message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")


@router.message(SubscriptionState.choosing_day)
async def choose_weekday(message: Message, state: FSMContext):
    days_of_week = {
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–í—Ç–æ—Ä–Ω–∏–∫": 1, "–°—Ä–µ–¥–∞": 2, "–ß–µ—Ç–≤–µ—Ä–≥": 3, "–ü—è—Ç–Ω–∏—Ü–∞": 4, "–°—É–±–±–æ—Ç–∞": 5, "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
    }
    day_text = message.text.strip()

    if day_text not in days_of_week:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    await state.update_data(weekday=days_of_week[day_text])
    logging.info(f"Selected weekday: {day_text} ({days_of_week[day_text]})")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä–µ–º—è
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
    await state.set_state(SubscriptionState.choosing_time)


@router.message(SubscriptionState.choosing_day)
async def choose_weekday_or_day(message: Message, state: FSMContext):
    try:
        value = int(message.text)
        data = await state.get_data()
        logging.info(f"Received data: {data}")

        if "weekly" in data:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            if value < 0 or value > 6:
                raise ValueError("–í –Ω–µ–¥–µ–ª–µ —Ç–æ–ª—å–∫–æ –¥–Ω–∏ —Å 0 (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫) –¥–æ 6 (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ).")
            await state.update_data(weekday=value)
            logging.info(f"Updated data with weekday={value}. State: {await state.get_data()}")
            await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
            await state.set_state(SubscriptionState.choosing_time)
        elif "monthly" in data:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            if value < 1 or value > 31:
                raise ValueError("–í –º–µ—Å—è—Ü–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ —Å 1 –ø–æ 31.")
            await state.update_data(day_of_month=value)
            logging.info(f"Updated data with day_of_month={value}. State: {await state.get_data()}")
            await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
            await state.set_state(SubscriptionState.choosing_time)
    except ValueError as e:
        await message.answer(str(e))


@router.message(SubscriptionState.choosing_monthly_day)
async def choose_day_of_month(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –º–µ—Å—è—Ü–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        day = int(message.text.strip())  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        logging.info(f"User {message.from_user.id} is trying to set day: {day}")  # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª

        if 1 <= day <= 31:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —á–∏—Å–ª–∞
            await state.update_data(day_of_month=day)
            await state.set_state(SubscriptionState.choosing_time)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
            await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
            logging.info(f"User {message.from_user.id} successfully set day of month to {day}.")
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31.")
            logging.warning(f"User {message.from_user.id} entered invalid day value: {message.text}")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15).")
        logging.error(f"User {message.from_user.id} entered invalid day value: {message.text}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É


async def save_time(message: Message, state: FSMContext):
    time_str = message.text.strip()
    try:
        hour, minute = map(int, time_str.split(":"))
        input_time = time(hour, minute)  # –í—Ä–µ–º—è –±–µ–∑ —É—á—ë—Ç–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤–∫–ª—é—á–∞—è —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å)
        data = await state.get_data()
        timezone_offset = data.get("timezone_offset", 0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC+0

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        adjusted_hour = (hour - timezone_offset) % 24  # –í—ã—á–∏—Ç–∞–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        adjusted_time = time(adjusted_hour, minute)

        sub_type = data.get("sub_type")
        frequency = data.get("frequency")
        weekday = data.get("weekday", None)
        day_of_month = data.get("day_of_month", None)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        logging.info(f"Adjusted time: {adjusted_time}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ UTC
        await save_subscription(
            message.from_user.id, sub_type=sub_type,
            periodicity=frequency,
            weekday=weekday,
            day_of_month=day_of_month,
            time_obj=adjusted_time,
            timezone_offset=timezone_offset
        )

        await message.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {frequency}. –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤–∞—à–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ): {time_str}.")
        await state.clear()

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM.")


@router.callback_query(F.data == 'show_subscriptions')
async def show_subscriptions(callback_query: CallbackQuery):
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscriptions = await conn.fetch(''' 
            SELECT subscription_type, periodicity, weekday, day_of_month, time
            FROM subscriptions
            WHERE user_id = $1
        ''', callback_query.from_user.id)

        if not subscriptions:
            await callback_query.message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É —Ä–∞—Å—Å—ã–ª–∫—É.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
        buttons = []
        for sub in subscriptions:
            subscription_text = f"{sub['subscription_type']} ({sub['periodicity']})"
            if sub['weekday'] is not None:
                weekday_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
                subscription_text += f" - {weekday_names[sub['weekday']]}"

            if sub['day_of_month'] is not None:
                subscription_text += f" - {sub['day_of_month']} —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞"
            subscription_text += f" - –í—Ä–µ–º—è: {sub['time']}"

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            buttons.append([types.InlineKeyboardButton(text=subscription_text,
                                                       callback_data=f"subscription_{sub['subscription_type']}_{sub['time']}")])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback_query.message.answer("–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=keyboard)

    except Exception as e:
        logging.error(f"Error fetching subscriptions: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await conn.close()


async def execute_db_query(query: str, *args):
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        return await conn.fetch(query, *args)
    except Exception as e:
        logging.error(f"DB error: {e}")
        return None
    finally:
        await conn.close()


@router.callback_query(F.data.startswith("unsubscribe_"))
async def unsubscribe(callback_query: CallbackQuery):
    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    subscription_data = callback_query.data.split("_")

    if len(subscription_data) < 3:
        await callback_query.message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    subscription_type = subscription_data[1]
    time_str = subscription_data[2]

    # –í—ã–≤–æ–¥–∏–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: subscription_type={subscription_type}, time_str={time_str}")

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤–∫–ª—é—á–∞–µ—Ç —Å–µ–∫—É–Ω–¥—ã
    if len(time_str) > 5:
        time_str = time_str[:5]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ (HH:MM)

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç time
        time_obj = datetime.strptime(time_str, '%H:%M').time()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Å–µ–∫—É–Ω–¥
    except ValueError:
        await callback_query.message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {time_str}. –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç - HH:MM.")
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        # –ó–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç time, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É
        await conn.execute(''' 
            DELETE FROM subscriptions 
            WHERE user_id = $1 AND subscription_type = $2 AND time = $3
        ''', callback_query.from_user.id, subscription_type, time_obj)

        await callback_query.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {subscription_type} –≤ {time_str}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data.startswith("subscription_"))
async def manage_subscription(callback_query: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    subscription_data = callback_query.data.split("_")
    subscription_type = subscription_data[1]
    time = subscription_data[2]

    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: {subscription_type} - –í—Ä–µ–º—è: {time}.")

    # –°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
    buttons = [
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚ùå", callback_data=f"unsubscribe_{subscription_type}_{time}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="back_to_subscriptions")]  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥

    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback_query.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π?", reply_markup=keyboard)


@router.callback_query(F.data == "back_to_subscriptions")
async def back_to_subscriptions(callback_query: CallbackQuery):
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscriptions = await conn.fetch(''' 
            SELECT subscription_type, periodicity, weekday, day_of_month, time
            FROM subscriptions
            WHERE user_id = $1
        ''', callback_query.from_user.id)

        if not subscriptions:
            await callback_query.message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É —Ä–∞—Å—Å—ã–ª–∫—É.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
        subscriptions_text = ""
        buttons = []
        for sub in subscriptions:
            subscription_text = f"{sub['subscription_type']} ({sub['periodicity']})"
            if sub['weekday'] is not None:
                weekday_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
                subscription_text += f" - {weekday_names[sub['weekday']]}"
            if sub['day_of_month'] is not None:
                subscription_text += f" - {sub['day_of_month']} —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞"
            subscription_text += f" - –í—Ä–µ–º—è: {sub['time']}"

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            buttons.append([InlineKeyboardButton(text=subscription_text,
                                                 callback_data=f"subscription_{sub['subscription_type']}_{sub['time']}")])

            subscriptions_text += f"{subscription_text}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
        buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="show_subscriptions")])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback_query.message.answer(f"–í–æ—Ç –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n{subscriptions_text}", reply_markup=keyboard)

    except Exception as e:
        logging.error(f"Error fetching subscriptions: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await conn.close()


@router.callback_query(F.data.startswith("unsubscribe_"))
async def unsubscribe(callback_query: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    subscription_data = callback_query.data.split("_")
    subscription_type = subscription_data[1]
    time_str = subscription_data[2]

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç time
        time_obj = datetime.strptime(time_str, '%H:%M').time()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Å–µ–∫—É–Ω–¥
    except ValueError:
        await callback_query.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        # –ó–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç time, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É
        await conn.execute(''' 
            DELETE FROM subscriptions 
            WHERE user_id = $1 AND subscription_type = $2 AND time = $3
        ''', callback_query.from_user.id, subscription_type, time_obj)

        await callback_query.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {subscription_type} –≤ {time_str}.")
    except Exception as e:
        logging.error(f"Failed to unsubscribe: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await conn.close()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class TimeInputState(StatesGroup):
    waiting_for_offset = State()
    waiting_for_time = State()


@subscribe_notifications.message(SubscriptionState.choosing_time)
async def process_time(message: Message, state: FSMContext):
    time_str = message.text.strip()
    logging.info(f"User inputted time: {time_str}")

    try:
        hour, minute = map(int, time_str.split(":"))
        if hour < 0 or hour > 23 or minute < 0 or minute > 59:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")

        input_time = time(hour, minute)

        data = await state.get_data()
        timezone_offset = data.get("timezone_offset", 0)
        adjusted_hour = (hour - timezone_offset) % 24
        adjusted_time = time(adjusted_hour, minute)

        logging.info(f"Adjusted time (with timezone offset): {adjusted_time}")

        sub_type = data.get("sub_type")
        frequency = data.get("frequency")
        weekday = data.get("weekday", None)
        day_of_month = data.get("day_of_month", None)
        report_type = data.get("report_type", "unknown")  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ—Ç—á—ë—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞
        await save_subscription(
            message.from_user.id, sub_type=sub_type,
            periodicity=frequency,
            weekday=weekday,
            day_of_month=day_of_month,
            time_obj=adjusted_time,
            timezone_offset=timezone_offset,
            report_type=report_type,
            token='sample_token'
        )

        await message.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {frequency}. –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤–∞—à–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ): {time_str}.")
        await state.clear()

    except ValueError as e:
        logging.error(f"Invalid time format entered: {time_str}. Error: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")


async def save_subscription(user_id, sub_type, periodicity, weekday, day_of_month, time_obj, timezone_offset,
                            report_type, token):
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    logging.info(f"Saving subscription for user {user_id}: sub_type={sub_type}, periodicity={periodicity}, "
                 f"weekday={weekday}, day_of_month={day_of_month}, time={time_obj}, report_type={report_type}, token={token}")

    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        await conn.execute(''' 
        INSERT INTO subscriptions(user_id, subscription_type, periodicity, weekday, day_of_month, time, timezone_offset, report_type, token)
        VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)
        ''', user_id, sub_type, periodicity, weekday, day_of_month, time_obj, timezone_offset, report_type, token)

        logging.info(f"Subscription for user {user_id} saved successfully.")
    except Exception as e:
        logging.error(f"Failed to save subscription: {e}")
    finally:
        await conn.close()


async def main() -> None:
    bot = Bot(token=cf.TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp.include_router(router)
    setup_routers_select_reports()
    dp.include_router(subscribe_notifications)
    dp.include_router(ai_answer)
    await bot.delete_webhook()

    try:
        logging.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
        await dp.start_polling(bot)
    except (CancelledError, KeyboardInterrupt, SystemExit):
        dp.shutdown()
        logging.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main())
