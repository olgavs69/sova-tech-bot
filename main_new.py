import os
import replicate
import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, \
    InlineKeyboardMarkup
import asyncpg
from datetime import datetime, time

import config as cf
from src.mailing.data.notification.notification_google_sheets_worker import notification_gsworker
from pydub import AudioSegment
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=cf.TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞
waiting_for_question = set()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞ –¥–ª—è Replicate
os.environ["REPLICATE_API_TOKEN"] = "r8_TaFGkUSHUTT5nRm6YlFTiW9XxnbYJ6N0ZB0tE"
replicate.api_token = os.environ["REPLICATE_API_TOKEN"]

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class MailingStates(StatesGroup):
    waiting_for_time = State()

class SubscriptionState(StatesGroup):
    choosing_frequency = State()
    choosing_type = State()
    choosing_day = State()
    choosing_monthly_day = State()
    choosing_time = State()

class NotificationGoogleSheetsWorker:
    def __init__(self):
        self.subscribed_ids = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    def contains_id(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ID –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫"""
        return user_id in self.subscribed_ids

    def add_id(self, user_id: int) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫"""
        if user_id not in self.subscribed_ids:
            self.subscribed_ids.append(user_id)
            logging.info(f"User {user_id} added to subscription list.")

    def remove_id(self, user_id: int) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        if user_id in self.subscribed_ids:
            self.subscribed_ids.remove(user_id)
            logging.info(f"User {user_id} removed from subscription list.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
DB_CONFIG = {
    'user': 'postgres',  # Correct username
    'password': '0000',  # Correct password
    'database': 'warehouse_of_goods',
    'host': 'localhost',  # or your DB host if remote
    'port': '5432'  # or your DB port
}

async def init_db_pool():
    return await asyncpg.create_pool("postgresql://postgres:0000@localhost/warehouse_of_goods")

db_pool = None  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª

async def save_subscription(user_id, sub_type, periodicity, weekday, day_of_month, time_str):
    try:
        hour, minute = map(int, time_str.split(":"))
        time_obj = time(hour, minute)
    except ValueError:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM.")

    global db_pool
    if db_pool is None:
        db_pool = await init_db_pool()

    async with db_pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO subscriptions (user_id, subscription_type, sub_type, periodicity, weekday, day_of_month, time)
            VALUES ($1, $2, $3, $4, $5, $6, $7)
            ON CONFLICT (user_id) DO UPDATE 
            SET subscription_type = $2, sub_type = $3, periodicity = $4, weekday = $5, day_of_month = $6, time = $7
            """,
            user_id, sub_type, sub_type, periodicity, weekday, day_of_month, time_obj
        )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è worker
notification_gsworker = NotificationGoogleSheetsWorker()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
router = Router(name=__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    has_token = False  # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
        reply_markup=get_markup(user_id, has_token)
    )

# –†–æ—É—Ç–µ—Ä —Å –∫–ª–∞–≤–∏—à–∞–º–∏
def get_markup(user_id: int, has_token: bool) -> types.InlineKeyboardMarkup:
    inline_kb = []

    if not has_token:
        btn = [types.InlineKeyboardButton(text='–ú–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤', callback_data='server_report_authorization')]
        inline_kb.append(btn)
    else:
        btn = [types.InlineKeyboardButton(text='–ú–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤', callback_data='analytics_report_begin')]
        inline_kb.append(btn)

    btn = [types.InlineKeyboardButton(text='–ú–µ–Ω—é —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∏ üõ†', callback_data='techsupport_menu')]
    inline_kb.append(btn)

    if notification_gsworker.contains_id(user_id):
        btn = [types.InlineKeyboardButton(text='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚ùå', callback_data='unregister')]
    else:
        btn = [types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üì©', callback_data='register_mailing')]
    inline_kb.append(btn)

    btn = [types.InlineKeyboardButton(text='–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç üìä', callback_data='generate_report')]
    inline_kb.append(btn)

    return types.InlineKeyboardMarkup(inline_keyboard=inline_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
@router.callback_query(F.data == 'register_mailing')
async def subscribe_to_mailing(callback_query: CallbackQuery, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="sub_daily")],
        [types.InlineKeyboardButton(text="–ü–æ –±—É–¥–Ω—è–º (–ü–Ω-–ü—Ç)", callback_data="sub_workdays")],
        [types.InlineKeyboardButton(text="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="sub_weekly")],
        [types.InlineKeyboardButton(text="–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data="sub_monthly")]
    ])
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard)

@dp.message(Command("subscribe"))
async def choose_subscription(message: types.Message, state: FSMContext):
    buttons = [
        [KeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ"), KeyboardButton("–ü–æ –±—É–¥–Ω—è–º")],
        [KeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"), KeyboardButton("–ï–∂–µ–º–µ—Å—è—á–Ω–æ")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:", reply_markup=keyboard)
    await state.set_state(SubscriptionState.choosing_frequency)


@router.callback_query(F.data.startswith("sub_"))
async def choose_subscription_type(callback_query: CallbackQuery, state: FSMContext):
    sub_type = callback_query.data.split("_")[1]

    await state.update_data(sub_type=sub_type)

    if sub_type == "weekly":
        await state.update_data(frequency="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ")
        await state.set_state(SubscriptionState.choosing_day)

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
        days_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="day_0")],
            [InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="day_1")],
            [InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="day_2")],
            [InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="day_3")],
            [InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="day_4")],
            [InlineKeyboardButton(text="–°—É–±–±–æ—Ç–∞", callback_data="day_5")],
            [InlineKeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="day_6")]
        ])

        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=days_kb)


@router.callback_query(F.data.startswith("day_"))
async def choose_weekday(callback_query: CallbackQuery, state: FSMContext):
    weekday = int(callback_query.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 6
    await state.update_data(weekday=weekday)

    logging.info(f"Selected weekday: {weekday}")

    await state.set_state(SubscriptionState.choosing_time)
    await callback_query.message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")


@router.message(SubscriptionState.choosing_day)
async def choose_weekday(message: Message, state: FSMContext):
    days_of_week = {
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–í—Ç–æ—Ä–Ω–∏–∫": 1, "–°—Ä–µ–¥–∞": 2, "–ß–µ—Ç–≤–µ—Ä–≥": 3, "–ü—è—Ç–Ω–∏—Ü–∞": 4, "–°—É–±–±–æ—Ç–∞": 5, "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
    }
    day_text = message.text.strip()

    if day_text not in days_of_week:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    await state.update_data(weekday=days_of_week[day_text])
    logging.info(f"Selected weekday: {day_text} ({days_of_week[day_text]})")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä–µ–º—è
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
    await state.set_state(SubscriptionState.choosing_time)


@router.message(SubscriptionState.choosing_day)
async def choose_weekday_or_day(message: Message, state: FSMContext):
    try:
        value = int(message.text)
        data = await state.get_data()
        logging.info(f"Received data: {data}")

        if "weekly" in data:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            if value < 0 or value > 6:
                raise ValueError("–í –Ω–µ–¥–µ–ª–µ —Ç–æ–ª—å–∫–æ –¥–Ω–∏ —Å 0 (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫) –¥–æ 6 (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ).")
            await state.update_data(weekday=value)
            logging.info(f"Updated data with weekday={value}. State: {await state.get_data()}")
            await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
            await state.set_state(SubscriptionState.choosing_time)
        elif "monthly" in data:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            if value < 1 or value > 31:
                raise ValueError("–í –º–µ—Å—è—Ü–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ —Å 1 –ø–æ 31.")
            await state.update_data(day_of_month=value)
            logging.info(f"Updated data with day_of_month={value}. State: {await state.get_data()}")
            await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
            await state.set_state(SubscriptionState.choosing_time)
    except ValueError as e:
        await message.answer(str(e))


@router.callback_query(F.data == "sub_monthly")
async def choose_monthly_day(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    await state.update_data(sub_type="monthly", frequency="–ï–∂–µ–º–µ—Å—è—á–Ω–æ")
    await state.set_state(SubscriptionState.choosing_day)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (–æ—Ç 1 –¥–æ 31), –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.")
    logging.info(f"User {callback_query.from_user.id} selected '–ï–∂–µ–º–µ—Å—è—á–Ω–æ' for subscription.")


@router.message(SubscriptionState.choosing_day)
async def choose_day_of_month(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –º–µ—Å—è—Ü–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        day = int(message.text.strip())  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        logging.info(f"User {message.from_user.id} is trying to set day: {day}")  # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª

        if 1 <= day <= 31:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —á–∏—Å–ª–∞
            await state.update_data(day_of_month=day)
            await state.set_state(SubscriptionState.choosing_time)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
            await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
            logging.info(f"User {message.from_user.id} successfully set day of month to {day}.")
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31.")
            logging.warning(f"User {message.from_user.id} entered invalid day value: {message.text}")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15).")
        logging.error(f"User {message.from_user.id} entered invalid day value: {message.text}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É


@router.message(SubscriptionState.choosing_time)
async def save_time(message: Message, state: FSMContext):
    time_str = message.text.strip()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É HH:MM
        hour, minute = map(int, time_str.split(":"))
        time_obj = time(hour, minute)

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        data = await state.get_data()
        logging.info(f"State data before saving: {data}")

        sub_type = data.get("sub_type")
        frequency = data.get("frequency")
        weekday = data.get("weekday", None)  # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        day_of_month = data.get("day_of_month", None)  # –ß–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)

        if not frequency:
            await message.answer("–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return

        logging.info(f"Saving subscription with weekday={weekday}, day_of_month={day_of_month}, time={time_str}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await save_subscription(
            message.from_user.id, sub_type=sub_type,
            periodicity=frequency,
            weekday=weekday,
            day_of_month=day_of_month,
            time_str=time_str
        )

        await message.answer(f"–í—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}.")
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM.")


async def on_start():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)


# –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    dp.include_router(router)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    await on_start()  # –ó–∞–ø—É—Å–∫ polling


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main())