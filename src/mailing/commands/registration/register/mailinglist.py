import os
import replicate
import asyncio
import logging
from asyncio import CancelledError
import speech_recognition as sr
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.dispatcher import router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
import config as cf
from src.mailing.data.notification.notification_google_sheets_worker import notification_gsworker
from pydub import AudioSegment

from src.basic.keyboards.keyboards import get_markup


@router.callback_query(F.data == "register_mailing")
async def handle_register_subscription(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'"""
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
    if not notification_gsworker.contains_id(user_id):
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        notification_gsworker.add_id(user_id)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")
        await callback_query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üì©")
    else:
        # –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω, —É–≤–µ–¥–æ–º–∏–º –æ–± —ç—Ç–æ–º
        await callback_query.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üì©")

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏
    markup = types.InlineKeyboardMarkup()

    markup.add(
        types.InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="period_daily"),
        types.InlineKeyboardButton("–ü–æ –±—É–¥–Ω—è–º (–ø–Ω-–ø—Ç)", callback_data="period_weekdays"),
        types.InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="period_weekly"),
        types.InlineKeyboardButton("–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data="period_monthly")
    )

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=markup
    )


@router.callback_query(F.data == "period_daily")
async def set_daily_time(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00).")


@router.callback_query(F.data == "period_weekdays")
async def set_weekdays_time(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –±—É–¥–Ω—è–º"""
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –±—É–¥–Ω—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00).")


@router.callback_query(F.data == "period_weekly")
async def set_weekly_time(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    markup = types.InlineKeyboardMarkup()
    days_of_week = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    for day in days_of_week:
        markup.add(types.InlineKeyboardButton(day, callback_data=f"weekly_{day.lower()}"))

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=markup
    )


@router.callback_query(F.data.startswith("weekly_"))
async def set_weekly_time_and_day(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    day_of_week = callback_query.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {day_of_week.capitalize()}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")


@router.callback_query(F.data == "period_monthly")
async def set_monthly_day(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    markup = types.InlineKeyboardMarkup()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞
    for day in range(1, 32):
        markup.add(types.InlineKeyboardButton(str(day), callback_data=f"monthly_{day}"))

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=markup
    )


@router.callback_query(F.data.startswith("monthly_"))
async def set_monthly_time_and_day(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    day_of_month = callback_query.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
    await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {day_of_month} —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
