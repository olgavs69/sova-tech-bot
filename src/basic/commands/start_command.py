from asyncio import get_event_loop
from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, BufferedInputFile, FSInputFile
from aiogram.types import InlineKeyboardMarkup as IKM, InlineKeyboardButton as IKB

import pandas as pd
from io import BytesIO
import json
import os
import locale

from reportlab import pdfbase
from reportlab.lib.pagesizes import letter
from reportlab.lib.utils import ImageReader
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab import pdfbase
from reportlab.pdfbase import pdfmetrics
from reportlab.platypus import TableStyle, Table
from reportlab.lib import colors

from openpyxl import Workbook
from openpyxl.styles import Alignment, Font

from src.basic.graphics.graphicsforpdf import create_combined_graph
from src.mailing.data.notification.notification_google_sheets_worker import notification_gsworker
from src.mailing.data.techsupport.techsupport_google_sheets_worker import techsupport_gsworker
from src.analytics.db.db import user_tokens_db
from src.util.log import logger

from src.basic.keyboards.keyboards import get_markup, get_report_format_keyboard

router = Router(name=__name__)

pdfmetrics.registerFont(TTFont('FreeSerif', 'resources/fonts/FreeSerif.ttf'))  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
# canvas.setFont

@router.callback_query(F.data == 'start')
async def start_callback_handler(query: CallbackQuery, state: FSMContext) -> None:
    await start_handler(query.from_user.id, query.message, state)
    await query.answer()


@router.message(CommandStart())
async def command_start_handler(message: types.Message, state: FSMContext) -> None:
    await start_handler(message.from_user.id, message, state)


async def start_handler(user_id: int, message: types.Message, state: FSMContext) -> None:
    await state.clear()

    msg = await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞... ‚öôÔ∏è")

    loop = get_event_loop()
    has_token = user_tokens_db.has_tgid(user_id)
    kb = await loop.run_in_executor(None, get_markup, user_id, has_token)

    await msg.edit_text(
        text=f"–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Ç-–±–æ—Ç SOVA-tech!",
        reply_markup=kb,
    )


@router.callback_query(F.data == 'generate_report')
async def generate_report_handler(query: CallbackQuery) -> None:
    print("Generate report callback triggered")  # Debug line
    btn_pdf = [IKB(text='PDF üìÑ', callback_data='generate_report_pdf')]
    btn_excel = [IKB(text='Excel üìä', callback_data='generate_report_excel')]
    kb = IKM(inline_keyboard=[btn_pdf, btn_excel])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await query.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞:",
        reply_markup=kb
    )
    await query.answer()



def create_report_pdf(data: dict) -> BytesIO:
    file_bytes = BytesIO()
    try:
        c = canvas.Canvas(file_bytes, pagesize=letter)
        width, height = letter

        # Use built-in fonts (e.g., Helvetica)
        c.setFont("Helvetica", 12)  # Use a built-in font

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞
        c.setFont("Helvetica-Bold", 16)
        c.drawString(100, height - 50, "–û–¢–ß–Å–¢ –í–´–†–£–ß–ö–ê (–∞–Ω–∞–ª–∏–∑)")

        y_position = height - 100

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –¥–∞–Ω–Ω—ã–º –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        for section_title, section_data in data.items():
            c.setFont("Helvetica-Bold", 12)
            c.drawString(100, y_position, section_title)
            y_position -= 20

            for item in section_data:
                c.setFont("Helvetica", 10)
                c.drawString(100, y_position, item)
                y_position -= 15

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
            y_position -= 10

        c.showPage()
        c.save()

        file_bytes.seek(0)
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")

    return file_bytes


def create_empty_excel() -> BytesIO:
    file_bytes = BytesIO()
    try:
        df = pd.DataFrame({
            "–î–∞—Ç–∞": ["01.01.2025"],
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞": ["–û—Ç—á—ë—Ç –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ"],
            "–û–ø–∏—Å–∞–Ω–∏–µ": ["–ü—É—Å—Ç–æ–π –æ—Ç—á—ë—Ç —Å —à–∞–±–ª–æ–Ω–æ–º –¥–∞–Ω–Ω—ã—Ö"]
        })

        with pd.ExcelWriter(file_bytes, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='–û—Ç—á—ë—Ç')

        file_bytes.seek(0)
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel: {e}")

    return file_bytes

def create_empty_pdf() -> BytesIO:
    file_bytes = BytesIO()
    try:
        c = canvas.Canvas(file_bytes, pagesize=letter)  # –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã Letter
        c.setFont("Helvetica", 12)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç Helvetica
        c.drawString(100, 750, "–≠—Ç–æ—Ç —Ñ–∞–π–ª –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –±–æ—Ç–æ–º.")
        c.drawString(100, 730, "–ü—É—Å—Ç–æ–π –æ—Ç—á—ë—Ç PDF —Å —à–∞–±–ª–æ–Ω–æ–º –¥–∞–Ω–Ω—ã—Ö.")
        c.showPage()
        c.save()

        file_bytes.seek(0)  # –°–¥–≤–∏–≥ —É–∫–∞–∑–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")

    return file_bytes


@router.callback_query(F.data == 'generate_report_pdf')
async def send_empty_pdf_report(query: CallbackQuery) -> None:
    try:
        pdf_file = create_empty_pdf()

        input_file = BufferedInputFile(pdf_file.getvalue(), filename="empty_report.pdf")

        await query.message.answer_document(
            document=input_file,
            caption="–í–∞—à –ø—É—Å—Ç–æ–π –æ—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –≥–æ—Ç–æ–≤!"
        )
    except Exception as e:
        await query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF –æ—Ç—á—ë—Ç–∞: {e}")



@router.callback_query(F.data == 'generate_report_excel')
async def send_empty_excel_report(query: CallbackQuery) -> None:
    try:
        excel_file = create_empty_excel()

        input_file = BufferedInputFile(excel_file.getvalue(), filename="empty_report.xlsx")

        await query.message.answer_document(
            document=input_file,
            caption="–í–∞—à –ø—É—Å—Ç–æ–π –æ—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel –≥–æ—Ç–æ–≤!"
        )
    except Exception as e:
        await query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel –æ—Ç—á—ë—Ç–∞: {e}")


# –í—ã–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–∞ –ê–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏

def create_json_report_pdf(data: dict) -> BytesIO:
    file_bytes = BytesIO()
    try:
        c = canvas.Canvas(file_bytes, pagesize=letter)
        width, height = letter
        margin = 50  # Page margins
        y_position = height - 50  # Initial text position

        # Title of the report
        c.setFont("FreeSerif", 16)
        c.drawString(margin, y_position, "–ê–ù–ê–õ–ò–ó –í–´–†–£–ß–ö–ò")
        y_position -= 60  # Increased space after the title

        c.setFont("FreeSerif", 7)  # Reduced font size for the table
        max_text_width = width - 2 * margin  # Maximum text width

        # Processing store data and displaying the table
        data_table = []
        headers = ["–ú–∞–≥–∞–∑–∏–Ω", "–í—ã—Ä—É—á–∫–∞", "–î–∏–Ω–∞–º–∏–∫–∞ (–Ω–µ–¥–µ–ª—è)", "–î–∏–Ω–∞–º–∏–∫–∞ (–º–µ—Å—è—Ü)", "–î–∏–Ω–∞–º–∏–∫–∞ (–≥–æ–¥)", "–ü—Ä–æ–≥–Ω–æ–∑"]
        data_table.append(headers)

        # Add rows with formatted numbers
        for store in data["data"]:
            row = [
                store["label"],
                format_number(store["revenue"]),
                format_number(store["revenue_dynamics_week"]),
                format_number(store["revenue_dynamics_month"]),
                format_number(store["revenue_dynamics_year"]),
                format_number(store["revenue_forecast"])
            ]
            data_table.append(row)

        # Add totals with formatted numbers
        totals = [
            data["sum"]["label"],
            format_number(data["sum"]["revenue"]),
            format_number(data["sum"]["revenue_dynamics_week"]),
            format_number(data["sum"]["revenue_dynamics_month"]),
            format_number(data["sum"]["revenue_dynamics_year"]),
            format_number(data["sum"]["revenue_forecast"])
        ]
        data_table.append(totals)

        # Create the table with the collected data and adjusted column widths
        table = Table(data_table, colWidths=[140, 80, 80, 80, 80, 80])  # Adjusted column widths
        table.setStyle(TableStyle([  # Styling the table
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('ALIGN', (1, 1), (-1, -1), 'CENTER'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
            ('FONTNAME', (0, 0), (-1, 0), "FreeSerif"),
            ('FONTNAME', (0, 1), (-1, -1), "FreeSerif"),
            ('FONTSIZE', (0, 0), (-1, -1), 7),  # Reduced font size for table text
        ]))

        # Add table to PDF
        table.wrapOn(c, width, height)
        table.drawOn(c, margin, y_position - len(data_table) * 12)  # Adjust row height to 12

        # Update y_position after the table
        y_position -= len(data_table) * 12 + 50  # Space after table before graphs

        # Create and add the combined graph (bar + pie chart)
        combined_graph_bytes = create_combined_graph(data)  # Call the function to generate the combined graph
        combined_graph_img = ImageReader(combined_graph_bytes)

        # Adjust width and position for a wider graph
        graph_width = width - 100  # Wider graph
        graph_height = 400  # Adjusted graph height
        graph_y_position = y_position - graph_height  # Adjusted y position to place the graph below the table

        # Draw the image (graph) on the canvas
        c.drawImage(combined_graph_img, 50, graph_y_position, graph_width, graph_height)  # Wider graph

        c.showPage()  # End the page
        c.save()

        file_bytes.seek(0)

    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")

    return file_bytes


# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞
report_data = {
    "1 –ì–æ—Å—Ç–µ–ø–æ—Ç–æ–∫ –∏ —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫": [
        "- —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: -10%, 500/460 —Ä—É–±",
        "–≥–ª—É–±–∏–Ω–∞ —á–µ–∫–∞: -4%, 4,5/3,8 –ø–æ–∑–∏—Ü–∏–π –≤ —á–µ–∫–µ",
        "+ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ +7%, 1200/1600 —á–µ–∫–æ–≤"
    ],
    "2 –í—ã—Ä—É—á–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º": [
        "- –±–∞—Ä -9%, 38%/33% –¥–æ–ª—è –±–∞—Ä–∞",
        "+ –∫—É—Ö–Ω—è +3%, 62%/67% –¥–æ–ª—è –∫—É—Ö–Ω–∏"
    ],
    "3 –í—ã—Ä—É—á–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –±–ª—é–¥": [
        "- —Å–∞–ª–∞—Ç—ã -7%, 450 000/410 000 —Ä—É–±",
        "—Å—É–ø—ã -12%, 250 000/190 000 —Ä—É–±",
        "+ –≤—ã–ø–µ—á–∫–∞ +10%, 500 000/600 000 —Ä—É–±",
        "–∫–æ—Ñ–µ +15%, 400 000/550 000 —Ä—É–±"
    ],
    # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
}

def create_report_excel(data: dict) -> BytesIO:
    file_bytes = BytesIO()
    try:
        with pd.ExcelWriter(file_bytes, engine='xlsxwriter') as writer:
            for section_title, section_data in data.items():
                # –°–æ–∑–¥–∞—ë–º DataFrame –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞
                df = pd.DataFrame(section_data, columns=[section_title])

                # –ü–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—ã–π –ª–∏—Å—Ç Excel
                df.to_excel(writer, index=False, sheet_name=section_title)

        file_bytes.seek(0)
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel: {e}")

    return file_bytes

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
report_data_excel = {
    "1 –ì–æ—Å—Ç–µ–ø–æ—Ç–æ–∫ –∏ —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫": [
        ["- —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: -10%, 500/460 —Ä—É–±"],
        ["–≥–ª—É–±–∏–Ω–∞ —á–µ–∫–∞: -4%, 4,5/3,8 –ø–æ–∑–∏—Ü–∏–π –≤ —á–µ–∫–µ"],
        ["+ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ +7%, 1200/1600 —á–µ–∫–æ–≤"]
    ],
    "2 –í—ã—Ä—É—á–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º": [
        ["- –±–∞—Ä -9%, 38%/33% –¥–æ–ª—è –±–∞—Ä–∞"],
        ["+ –∫—É—Ö–Ω—è +3%, 62%/67% –¥–æ–ª—è –∫—É—Ö–Ω–∏"]
    ],
    "3 –í—ã—Ä—É—á–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –±–ª—é–¥": [
        ["- —Å–∞–ª–∞—Ç—ã -7%, 450 000/410 000 —Ä—É–±"],
        ["—Å—É–ø—ã -12%, 250 000/190 000 —Ä—É–±"],
        ["+ –≤—ã–ø–µ—á–∫–∞ +10%, 500 000/600 000 —Ä—É–±"],
        ["–∫–æ—Ñ–µ +15%, 400 000/550 000 —Ä—É–±"]
    ],
    # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –≤ Excel
excel_file = create_report_excel(report_data_excel)



@router.callback_query(F.data == 'generate_sample_report')
async def generate_sample_report_handler(query: CallbackQuery) -> None:
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞
    btn_pdf = [IKB(text='PDF üìÑ', callback_data='generate_sample_report_pdf')]
    btn_excel = [IKB(text='Excel üìä', callback_data='generate_sample_report_excel')]
    kb = IKM(inline_keyboard=[btn_pdf, btn_excel])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await query.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞:",
        reply_markup=kb
    )
    await query.answer()

@router.callback_query(F.data == 'generate_sample_report_pdf')
async def generate_sample_report_pdf_handler(query: CallbackQuery) -> None:
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤ PDF
        pdf_file = create_report_pdf(report_data)

        input_file = BufferedInputFile(pdf_file.getvalue(), filename="sample_report_–≤—ã—Ä—É—á–∫–∞.pdf")

        await query.message.answer_document(
            document=input_file,
            caption="–ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –≤—ã—Ä—É—á–∫–µ (–∞–Ω–∞–ª–∏–∑) –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –≥–æ—Ç–æ–≤!"
        )
    except Exception as e:
        await query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ PDF –æ—Ç—á—ë—Ç–∞: {e}")


@router.callback_query(F.data == 'generate_sample_report_excel')
async def generate_sample_report_excel_handler(query: CallbackQuery) -> None:
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤ Excel
        excel_file = create_report_excel(report_data_excel)

        input_file = BufferedInputFile(excel_file.getvalue(), filename="sample_report_–≤—ã—Ä—É—á–∫–∞.xlsx")

        await query.message.answer_document(
            document=input_file,
            caption="–ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –≤—ã—Ä—É—á–∫–µ (–∞–Ω–∞–ª–∏–∑) –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel –≥–æ—Ç–æ–≤!"
        )
    except Exception as e:
        await query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ Excel –æ—Ç—á—ë—Ç–∞: {e}")


JSON_FILE_PATH = "files/example.json"

def load_json_from_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ example.json, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å"""
    if os.path.exists(JSON_FILE_PATH):
        try:
            with open(JSON_FILE_PATH, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON-—Ñ–∞–π–ª–∞.")
            return {}
    print("–§–∞–π–ª JSON –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return {}


@router.message(F.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
async def load_data_handler(message: Message, state: FSMContext):
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, JSON)
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(json_data={"key": "value"})  # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    await message.answer(
        "–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞:",
        reply_markup=get_report_format_keyboard()
    )

@router.callback_query(F.data == 'generate_json_report')
async def generate_json_report_handler(query: CallbackQuery, state: FSMContext):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ example.json
    json_data = load_json_from_file()

    if not json_data:
        await query.message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ JSON —Ñ–∞–π–ª–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSMContext
    await state.update_data(json_data=json_data)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞
    kb = IKM(inline_keyboard=[[
        IKB(text='PDF üìÑ', callback_data='generate_json_report_pdf')
    ], [
        IKB(text='Excel üìä', callback_data='generate_json_report_excel')
    ]])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞:", reply_markup=kb)
    await query.answer()


@router.message(F.data == 'generate_json_report')
async def process_json_file(message: Message, state: FSMContext):
    document = message.document
    if not document.file_name.endswith('.json'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")
        return

    file = await message.bot.get_file(document.file_id)
    file_path = file.file_path
    file_bytes = await message.bot.download_file(file_path)

    try:
        uploaded_json = json.load(BytesIO(file_bytes))
    except json.JSONDecodeError:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON-—Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ example.json
    file_json = load_json_from_file()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    combined_data = {**file_json, **uploaded_json}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSMContext
    await state.update_data(json_data=combined_data)

    # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print("–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", combined_data)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞
    kb = IKM(inline_keyboard=[
        [IKB(text='PDF üìÑ', callback_data='generate_json_report_pdf')],
        [IKB(text='Excel üìä', callback_data='generate_json_report_excel')]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞:", reply_markup=kb)


def format_number(value):
    """Helper function to format numbers"""
    return f"{value:,.2f}"


def create_report_excel(data: dict) -> BytesIO:
    # Create a new workbook and sheet
    wb = Workbook()
    ws = wb.active
    ws.title = "–û—Ç—á—ë—Ç"

    # Define the headers
    headers = ["–ú–∞–≥–∞–∑–∏–Ω", "–í—ã—Ä—É—á–∫–∞", "–î–∏–Ω–∞–º–∏–∫–∞ (–Ω–µ–¥–µ–ª—è)", "–î–∏–Ω–∞–º–∏–∫–∞ (–º–µ—Å—è—Ü)", "–î–∏–Ω–∞–º–∏–∫–∞ (–≥–æ–¥)", "–ü—Ä–æ–≥–Ω–æ–∑"]

    # Add headers to the first row and format them
    for col_num, header in enumerate(headers, 1):
        cell = ws.cell(row=1, column=col_num, value=header)
        cell.font = Font(bold=True)  # Bold headers
        cell.alignment = Alignment(horizontal="center", vertical="center")  # Center alignment

    # Adding store data rows
    row_num = 2  # Start from the second row (after the header)
    for store in data["data"]:
        row = [
            store["label"],
            format_number(store["revenue"]),
            format_number(store["revenue_dynamics_week"]),
            format_number(store["revenue_dynamics_month"]),
            format_number(store["revenue_dynamics_year"]),
            format_number(store["revenue_forecast"])
        ]
        for col_num, value in enumerate(row, 1):
            cell = ws.cell(row=row_num, column=col_num, value=value)
            cell.alignment = Alignment(horizontal="center", vertical="center")  # Center alignment
        row_num += 1

    # Add the totals row
    totals = [
        data["sum"]["label"],
        format_number(data["sum"]["revenue"]),
        format_number(data["sum"]["revenue_dynamics_week"]),
        format_number(data["sum"]["revenue_dynamics_month"]),
        format_number(data["sum"]["revenue_dynamics_year"]),
        format_number(data["sum"]["revenue_forecast"])
    ]
    for col_num, value in enumerate(totals, 1):
        cell = ws.cell(row=row_num, column=col_num, value=value)
        cell.alignment = Alignment(horizontal="center", vertical="center")  # Center alignment

    # Save the workbook to a BytesIO object to send as a document
    excel_file = BytesIO()
    wb.save(excel_file)
    excel_file.seek(0)  # Reset the pointer to the beginning of the file
    return excel_file


@router.callback_query(F.data == 'generate_json_report_excel')
async def generate_json_report_excel_handler(query: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        json_data = user_data.get('json_data', {})

        if not json_data:
            await query.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –æ—Ç—á—ë—Ç–∞
        excel_file = create_report_excel(json_data)
        input_file = BufferedInputFile(excel_file.getvalue(), filename="–∞–Ω–∞–ª–∏–∑_–≤—ã—Ä—É—á–∫–∏.xlsx")  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel –æ—Ç—á—ë—Ç
        await query.message.answer_document(
            document=input_file,
            caption="–û—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel –≥–æ—Ç–æ–≤!"
        )
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel –æ—Ç—á—ë—Ç–∞: {e}")


locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')

def format_number(number):
    # Format the number with thousand separators (dot as thousands separator)
    try:
        return locale.format_string("%d", number, grouping=True)
    except Exception:
        return str(number)

@router.callback_query(F.data == 'generate_json_report_pdf')
async def generate_json_report_pdf_handler(query: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        json_data = user_data.get('json_data', {})

        if not json_data:
            await query.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á—ë—Ç–∞
        pdf_file = create_json_report_pdf(json_data)
        input_file = BufferedInputFile(pdf_file.getvalue(), filename="json_report.pdf")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –æ—Ç—á—ë—Ç
        await query.message.answer_document(
            document=input_file,
            caption="–û—Ç—á—ë—Ç –ø–æ –¥–∞–Ω–Ω—ã–º JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –≥–æ—Ç–æ–≤!"
        )
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF –æ—Ç—á—ë—Ç–∞: {e}")


def wrap_text(text, font, font_size, max_width):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    lines = []
    current_line = []
    current_width = 0

    for word in text.split():
        word_width = pdfmetrics.stringWidth(word, font, font_size)
        if current_width + word_width <= max_width:
            current_line.append(word)
            current_width += word_width + pdfmetrics.stringWidth(' ', font, font_size)  # —É—á—ë—Ç –ø—Ä–æ–±–µ–ª–∞
        else:
            lines.append(' '.join(current_line))
            current_line = [word]
            current_width = word_width  # –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å —Ç–µ–∫—É—â–∏–º —Å–ª–æ–≤–æ–º

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
    if current_line:
        lines.append(' '.join(current_line))

    return lines

